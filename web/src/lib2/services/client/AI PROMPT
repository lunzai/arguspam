[MODEL_NAME]
[model-name]
[Model]
[model]
[endpoint]

Create a CRUD service for the `[MODEL_NAME]` model following the established patterns. 

**Context:**
I have an existing base service class and org service example that you should follow. The project structure uses:
- TypeScript/SvelteKit
- A base service class with common CRUD operations
- Strongly typed interfaces
- RESTful API endpoints

**Relevant Files to Examine:**
- `src/lib/services/client/base.ts` - Base service class with common CRUD methods
- `src/lib/services/client/orgs.ts` - Example org service implementation
- `src/lib/types/models/[model].ts` - Model type definitions (where [model] is the target model)
- `src/lib/types/api.ts` - API response types
- `src/lib/api/client.ts` - HTTP client implementation

**Requirements:**

1. **Create** `src/lib/services/client/[model-name]s.ts` (plural form)

2. **Follow these patterns:**
   - Extend the `BaseService` class
   - Use nested `filter` object structure (NOT individual `filter[key]` properties)
   - NO `per_page` parameter (backend controls page size)
   - Include relationships as string arrays: `include?: string[]`
   - Sort as string array with `-` prefix for descending: `sort?: string[]`
   - Page parameter for pagination: `page?: number`

3. **Service structure:**
   ```typescript
   export interface [Model]FilterParams extends BaseFilterParams {
     filter?: {
       // Add model-specific filter properties based on model attributes
     };
   }

   export interface [Model]FindByIdParams extends BaseFindByIdParams {
     include?: ('relationship1' | 'relationship2')[];  // Based on model relationships
   }

   export class [Model]Service extends BaseService<[Model], Create[Model]Request, Update[Model]Request> {
     constructor() {
       super('/[endpoint]');  // RESTful endpoint path
     }
     // Override methods with proper typing and documentation
   }

   export const [model]Service = new [Model]Service();
   ```

4. **API Endpoints to implement:**
   - Find all: `GET /[endpoint]?include=xxx&filter[key]=xxx&sort=xxx`
   - Find by ID: `GET /[endpoint]/[ID]?include=relationships`
   - Create: `POST /[endpoint]`
   - Update: `PUT /[endpoint]/[ID]`
   - Delete: `DELETE /[endpoint]/[ID]`

5. **Include comprehensive JSDoc:**
   - Method descriptions
   - Parameter explanations
   - Usage examples with the new filter structure
   - Show relationship inclusion examples

6. **Type Safety:**
   - Properly typed filter parameters based on model attributes
   - Relationship names should match backend API model relationships
   - Use the existing `Create[Model]Request` and `Update[Model]Request` types

**Example Filter Usage Pattern:**
```typescript
await [model]Service.findAll({
  include: ['relationship1', 'relationship2'],
  filter: {
    status: 'active',
    name: 'search term'
  },
  sort: ['-created_at', 'name'],
  page: 1
});
```

**Do NOT:**
- Add `per_page` parameter
- Create individual `'filter[key]'` properties
- Assume relationships - only use what's documented in the model
- Refactor existing services
- Create additional helper files

**Provide:** The complete service file with proper imports, types, class implementation, and exported service instance.
